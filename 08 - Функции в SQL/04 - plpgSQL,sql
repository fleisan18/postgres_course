CREATE OR REPLACE FUNCTION get_total_number_of_goods() RETURNS bigint AS $$
BEGIN
    RETURN SUM(units_in_stock)
    FROM products;
END
$$ LANGUAGE plpgsql;

SELECT get_total_number_of_goods();

--

CREATE OR REPLACE FUNCTION get_max_price_from_discontinued() RETURNS real AS $$
BEGIN
    RETURN MAX(unit_price)
    FROM products
    WHERE discontinued = 1;
END
$$ LANGUAGE plpgsql;

SELECT get_max_price_from_discontinued();

--

CREATE OR REPLACE FUNCTION get_price_boundaries (OUT max_price real, OUT min_price real) AS $$
BEGIN
--  max_price := MAX(unit_price) FROM products;
--  min_price := MIN(unit_price) FROM products;
    SELECT MAX(unit_price), MIN(unit_price) 
    INTO max_price, min_price
    FROM products;
END
$$ LANGUAGE plpgsql;

SELECT * FROM get_price_boundaries();

--

CREATE OR REPLACE FUNCTION get_sum (x int, y int, OUT result int) AS $$
BEGIN
    result := x + y;
--  RETURN (если есть ветвления принудительный выход из цикла)
END
$$ LANGUAGE plpgsql;

SELECT * FROM get_sum(4,5);

--
DROP FUNCTION IF EXISTS get_customers_by_country;

CREATE OR REPLACE FUNCTION get_customers_by_country (customer_country varchar) RETURNS SETOF customers AS $$
BEGIN
    RETURN QUERY
    SELECT *
    FROM customers
    WHERE country = customer_country;
END
$$ LANGUAGE plpgsql;

SELECT * FROM get_customers_by_country('USA');

--

CREATE OR REPLACE FUNCTION get_triangle_square (ab real, bc real, ac real) RETURNS real AS $$
DECLARE
    perimeter real;
BEGIN
    perimeter = (ab+bc+ac) / 2;
    RETURN sqrt(perimeter * (perimeter - ab) * (perimeter - bc) * (perimeter - ac));
END
$$ LANGUAGE plpgsql;

SELECT get_triangle_square (6,6,6);

--

CREATE OR REPLACE FUNCTION middle_price() RETURNS SETOF products AS $$
DECLARE
    avg_price real;
    low_price real;
    high_price real;
BEGIN 
    SELECT AVG(unit_price) INTO avg_price
    FROM products;
    
    low_price = avg_price * 0.75;
    high_price = avg_price * 1.25;
    
    RETURN QUERY
    SELECT * 
    FROM products
    WHERE unit_price BETWEEN low_price AND high_price;
END
$$ LANGUAGE plpgsql;

SELECT * FROM middle_price();

